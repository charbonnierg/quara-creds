# Some options in this file are HUPable, including the pki section. (A HUP will reload credentials from disk without affecting existing tunnels)

# PKI defines the location of credentials for this node.
# Each of these can either be inlined by using the yaml ": |" syntax or be provided as a filepath
pki:
  # The CAs that are accepted by this node. Must contain one or more certificates created by 'nebula-cert ca'
  ca: |
    -----BEGIN NEBULA CERTIFICATE-----
    CoABCgVxdWFyYRIJgICQU4CA/P8PIgV1c2VycyIHc2VydmVycyIFYWRtaW4iBXF1
    YXJhIgRyZ3BpIgZrYXV0ZXgiBnJheW5ldCIIZXh0ZXJuYWwo9rnhjwYwlovOngY6
    IKTbZqBOp16vl9DGu/VFKHn7HNmQWljmSF/2ZPzE9+DdQAESQOJrNM7V7/SuZoQx
    lSE9BPHtbOkc4TMACCCDOXJ8bmCodaBMgXp3ph8wMnG2rJfrjfTXb3kqf/uw1NlJ
    O/3pkA8=
    -----END NEBULA CERTIFICATE-----
    -----BEGIN NEBULA CERTIFICATE-----
    CoUBCgVxdWFyYRIJgICQU4CA/P8PIgV1c2VycyIHc2VydmVycyIFYWRtaW4iBXF1
    YXJhIgN3ZWIiBHJncGkiBmthdXRleCIGcmF5bmV0IghleHRlcm5hbCi8+ciZBjCc
    7Y7GBjog5obt/1N89xRfT05PaEMM+SPzxYRI7udJGDhsfJ5BkmFAARJAoXZOrNar
    bIgOz8JquKYkuuzsKjLOHVVDek5RfbtC4E7agFTf0GmjZyKzPQvoV1XlXX0ft8BK
    EhX1UlxgZwfdBA==
    -----END NEBULA CERTIFICATE-----
  cert: |
    -----BEGIN NEBULA CERTIFICATE-----
    CncKDGNoYXJib25uaWVyZxIJ5MiRU4CA/P8PIgV1c2VycyIFcXVhcmEo87WNmgYw
    8/uXmgY6IIPoyiP4Bvp1CTZnmSWsvfVWbSKVxVhFePwV+tio+i9+SiCp5jz0MtrP
    E6Dvf9LXCsU7MOtgqhgKXMfLT7TbmqL4dBJAwA5GuYmQy7A2MyT/9cUUKLzyrLAZ
    6NxV7cBlnGndFyO7c7YZt4ZGJduMk185dgP84lItIm5hDDla3jc1NctACQ==
    -----END NEBULA CERTIFICATE-----
    -----BEGIN NEBULA CERTIFICATE-----
    CncKDGNoYXJib25uaWVyZxIJ5MiRU4CA/P8PIgV1c2VycyIFcXVhcmEo9LWNmgYw
    9PuXmgY6IIPoyiP4Bvp1CTZnmSWsvfVWbSKVxVhFePwV+tio+i9+SiBtQx06sDVf
    W+tIgy/R7gGTSoP06xTJfUnDyc2NepznTBJAWZPcDxpPdKQHxD+FNdi+8I9/XSy0
    myxekii7ZdsEMLd6XY9HgoO/xdkbUzHgnf70RxJUQmPTffyYntBuqSZJDQ==
    -----END NEBULA CERTIFICATE-----
  key: |
    -----BEGIN NEBULA X25519 PRIVATE KEY-----
    zJXjdX+Dei+xiwfK1phhvHeHsUQ/0xdZOzfBA/9vxLE=
    -----END NEBULA X25519 PRIVATE KEY-----

# The static host map defines a set of hosts with fixed IP addresses on the internet (or any network).
# A host can have multiple fixed IP addresses defined here, and nebula will try each when establishing a tunnel.
# The syntax is:
#   "{nebula ip}": ["{routable ip/dns name}:{routable port}"]
static_host_map:
  "10.100.100.1": ["51.103.41.95:4242"]

lighthouse:
  # am_lighthouse is used to enable lighthouse functionality for a node. This should ONLY be true on nodes
  # you have configured to be lighthouses in your network
  am_lighthouse: false
  # interval is the number of seconds between updates from this node to a lighthouse.
  # during updates, a node sends information about its current IP addresses to each node.
  interval: 60
  # hosts is a list of lighthouse hosts this node should report to and query from
  # IMPORTANT: THIS SHOULD BE LIGHTHOUSES' NEBULA IPs, NOT LIGHTHOUSES' REAL ROUTABLE IPs
  hosts:
  - "10.100.100.1"


listen:
  # To listen on both any ipv4 and ipv6 use "[::]"
  host: "[::]"
  port: 0


punchy:
  # Continues to punch inbound/outbound at a regular interval to avoid expiration of firewall nat mappings
  punch: true

  # respond means that a node you are trying to reach will connect back out to you if your hole punching fails
  # this is extremely useful if one node is behind a difficult nat, such as a symmetric NAT
  # Default is false
  respond: true

  # delays a punch response for misbehaving NATs, default is 1 second, respond must be true to take effect
  delay: 1s

# Preferred ranges is used to define a hint about the local network ranges, which speeds up discovering the fastest
# path to a network adjacent nebula node.
# NOTE: the previous option "local_range" only allowed definition of a single range
# and has been deprecated for "preferred_ranges"


# EXPERIMENTAL: relay support for networks that can't establish direct connections.
relay:
  # Relays are a list of Nebula IP's that peers can use to relay packets to me.
  # IPs in this list must have am_relay set to true in their configs, otherwise
  # they will reject relay requests.
  #relays:
    #- 192.168.100.1
    #- <other Nebula VPN IPs of hosts used as relays to access me>
  # Set am_relay to true to permit other hosts to list my IP in their relays config. Default false.
  am_relay: false
  # Set use_relays to false to prevent this instance from attempting to establish connections through relays.
  # default true
  use_relays: true

# Configure the private interface. Note: addr is baked into the nebula certificate
tun:
  # When tun is disabled, a lighthouse can be started without a local tun interface (and therefore without root)
  disabled: false
  # Name of the device. If not set, a default will be chosen by the OS.
  # For macOS: if set, must be in the form `utun[0-9]+`.
  # For FreeBSD: Required to be set, must be in the form `tun[0-9]+`.
  dev: nebula1
  # Toggles forwarding of local broadcast packets, the address of which depends on the ip/mask encoded in pki.cert
  drop_local_broadcast: false
  # Toggles forwarding of multicast packets
  drop_multicast: false
  # Sets the transmit queue length, if you notice lots of transmit drops on the tun it may help to raise this number. Default is 500
  tx_queue: 500
  # Default MTU for every packet, safe setting is (and the default) 1300 for internet based traffic
  mtu: 1300
  # Route based MTU overrides, you have known vpn ip paths that can support larger MTUs you can increase/decrease them here
  routes:
    #- mtu: 8800
    #  route: 10.0.0.0/16
  # Unsafe routes allows you to route traffic over nebula to non-nebula nodes
  # Unsafe routes should be avoided unless you have hosts/services that cannot run nebula
  # NOTE: The nebula certificate of the "via" node *MUST* have the "route" defined as a subnet in its certificate
  # `mtu` will default to tun mtu if this option is not specified
  # `metric` will default to 0 if this option is not specified
  unsafe_routes:
    #- route: 172.16.1.0/24
    #  via: 192.168.100.99
    #  mtu: 1300
    #  metric: 100


# TODO
# Configure logging level
logging:
  # panic, fatal, error, warning, info, or debug. Default is info
  level: info
  # json or text formats currently available. Default is text
  format: text
  # Disable timestamp logging. useful when output is redirected to logging system that already adds timestamps. Default is false
  #disable_timestamp: true
  # timestamp format is specified in Go time format, see:
  #     https://golang.org/pkg/time/#pkg-constants
  # default when `format: json`: "2006-01-02T15:04:05Z07:00" (RFC3339)
  # default when `format: text`:
  #     when TTY attached: seconds since beginning of execution
  #     otherwise: "2006-01-02T15:04:05Z07:00" (RFC3339)
  # As an example, to log as RFC3339 with millisecond precision, set to:
  #timestamp_format: "2006-01-02T15:04:05.000Z07:00"

# Nebula security group configuration
firewall:
  conntrack:
    tcp_timeout: 12m
    udp_timeout: 3m
    default_timeout: 10m

  # The firewall is default deny. There is no way to write a deny rule.
  # Rules are comprised of a protocol, port, and one or more of host, group, or CIDR
  # Logical evaluation is roughly: port AND proto AND (ca_sha OR ca_name) AND (host OR group OR groups OR cidr)
  # - port: Takes `0` or `any` as any, a single number `80`, a range `200-901`, or `fragment` to match second and further fragments of fragmented packets (since there is no port available).
  #   code: same as port but makes more sense when talking about ICMP, TODO: this is not currently implemented in a way that works, use `any`
  #   proto: `any`, `tcp`, `udp`, or `icmp`
  #   host: `any` or a literal hostname, ie `test-host`
  #   group: `any` or a literal group name, ie `default-group`
  #   groups: Same as group but accepts a list of values. Multiple values are AND'd together and a certificate would have to contain all groups to pass
  #   cidr: a CIDR, `0.0.0.0/0` is any.
  #   ca_name: An issuing CA name
  #   ca_sha: An issuing CA shasum

  outbound:
    # Allow all outbound traffic from this node
    - port: any
      proto: any
      host: any

  inbound:
    # Allow icmp between any nebula hosts
    - port: any
      proto: icmp
      host: any
